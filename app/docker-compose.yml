version: "3.7"
services:
    nginx:
        image: nginx:latest
        container_name: nginx
        ports:
            - 80:80
            - 443:443
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
            - ./frontend/app/404.html:/etc/nginx/404.html
            - ./frontend/app/404.html:/usr/share/nginx/html/404.html
        depends_on:
            - devices
            - frontend
            - postgres-admin
            - notification-service

    notification-service:
        container_name: notification-service
        build:
            context: ./
            dockerfile: ./notification_service/notification_service.dockerfile
        expose: 
            - 8040
        command: /usr/local/bin/gunicorn --worker-class eventlet -w 1 notification_service.main:app -b 0.0.0.0:8040
    

    frontend:
        container_name: frontend
        build:
            context: ./frontend
        expose: 
            - 8008
        volumes:
            - ./frontend:/opt/app
        command: sh -c "yarn && yarn start"
        # command: sh -c "yarn build && yarn start-prod"
        depends_on:
            - devices

        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8008"]
            interval: 1m30s
            timeout: 10s
            retries: 3

    devices:
        build:
            context: ./
            dockerfile: ./devices/dockerfiles/devices.dockerfile
        container_name: devices
        env_file:
            - .env
        volumes:
            - ./devices:/app/devices
        command: ["uvicorn", "devices.main:app", "--reload", "--host", "0.0.0.0", "--port", "8020"]
        expose:
            - 8020
        depends_on:    
            - postgres
            - mongo_db
            - queue
        # restart: on-failure
    
    postgres:
        image: "postgres:13-alpine"
        container_name: postgres
        environment:
            POSTGRES_USER: $DB_USERNAME
            POSTGRES_PASSWORD: $DB_PASSWORD
            PGDATA: /data/postgres
        volumes:
            - ./database/psql:/docker-entrypoint-initdb.d
            # - postgres-data:/data/postgres
        expose:
            - 5432
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready --username=${DB_USERNAME} --dbname=${DB_DATABASE}"]
            interval: 10s
            timeout: 5s
            retries: 5
    
    mongo_db:
        image: mongo:latest
        container_name: mongo_db
        command: mongod --port 27018
        environment:
            MONGO_INITDB_ROOT_USERNAME: $DB_USERNAME
            MONGO_INITDB_ROOT_PASSWORD: $DB_PASSWORD
        expose:
            - 27018
        volumes:
            - mongodb-data:/data/db

    postgres-admin:
        image: dpage/pgadmin4
        container_name: postgres-admin
        env_file:
            - .env
        ports:
            - 5433:80
        restart: unless-stopped
        depends_on: 
            - postgres

    queue:
        image: rabbitmq:3-management
        container_name: queue
        volumes:
            - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config
    
    flower:
        image: mher/flower
        container_name: flower
        env_file:
            - .env
        environment:
            - CELERY_BROKER_URL=amqp://guest@queue:5672//
            - CELERY_BROKER_API_URL=http://guest:guest@queue:15672/api//
            - FLOWER_PORT=8888
        expose:  
            - 8888  
        depends_on:    
            - queue

    celery_worker:
        container_name: celery_worker
        depends_on:
            - queue
        env_file:
            - .env
        build:
            context: ./
            dockerfile: ./devices/dockerfiles/celery_worker.dockerfile
        command: celery -A devices.celery_tasks.tasks worker --loglevel=INFO -Q rule_executor -c 1 -E
   
volumes:
    postgres-data:
    mongodb-data:
