version: "3.7"
services:
    devices:
        build:
            context: ./
            dockerfile: ./devices/Dockerfile
        container_name: devices
        environment: 
            PSQL_DATABASE_URI: postgresql://$DB_USERNAME:$DB_PASSWORD@postgres:5432/smart_house
            MONGO_DATABASE_URI: mongodb://$DB_USERNAME:$DB_PASSWORD@mongo_db:27018
            TELEGRAM_API_TOKEN: $TELEGRAM_API_TOKEN 
            GROUP_CHAT_ID_COTTAGE: $GROUP_CHAT_ID_COTTAGE 
            AMQP_URI: $AMQP_URI
        command: ["uvicorn", "devices.main:app", "--host", "0.0.0.0", "--port", "8020"]
        ports:
            - 8020:8020
        expose: 
            - 8020
        depends_on:    
            - postgres
            - mongo_db
            - queue
        # restart: on-failure
    
    postgres:
        image: "postgres:13-alpine"
        container_name: postgres
        environment:
            POSTGRES_USER: $DB_USERNAME
            POSTGRES_PASSWORD: $DB_PASSWORD
            PGDATA: /data/postgres
        volumes:
            - ./database/psql:/docker-entrypoint-initdb.d
            # - postgres-data:/data/postgres
        ports:
            - 5432:5432
        expose: 
            - 5432
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready --username=${DB_USERNAME} --dbname=${DB_DATABASE}"]
            interval: 10s
            timeout: 5s
            retries: 5
    
    mongo_db:
        image: mongo:latest
        container_name: mongo_db
        command: mongod --port 27018
        environment:
            MONGO_INITDB_ROOT_USERNAME: $DB_USERNAME
            MONGO_INITDB_ROOT_PASSWORD: $DB_PASSWORD
        ports:
            - 27018:27018
        volumes:
            - mongodb-data:/data/db

    postgres-admin:
        image: dpage/pgadmin4
        container_name: postgres-admin
        environment:
            PGADMIN_DEFAULT_EMAIL: $PGADMIN_DEFAULT_EMAIL
            PGADMIN_DEFAULT_PASSWORD: $PGADMIN_DEFAULT_PASSWORD
        ports:
            - 5433:80
        restart: unless-stopped

    queue:
        image: rabbitmq:3-management
        container_name: queue
    
    # flower:
    #     image: mher/flower
    #     container_name: flower
    #     env_file:
    #     - .env
    #     command:
    #     - "--broker=amqp://guest@queue:5672//"
    #     - "--broker_api=http://guest:guest@queue:15672/api//"
    #     depends_on:    
    #         - queue

    
      
volumes:
    postgres-data:
    mongodb-data:
